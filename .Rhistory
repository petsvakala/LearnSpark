packageVersion("sparklyr")
library(sparklyr)
spark_available_versions()
spark_installed_versions()
options(spark.install.dir = "C:/datasciense/spark/")
spark_install("2.3")
spark_installed_versions()
sc <- spark_connect(master = "local", version = "2.3")
sc <- spark_connect(master = "local", version = "2.3")
cars <- copy_to(sc, mtcars)
sr(cars)
str(cars)
cars
spark_web(sc)
library(DBI) dbGetQuery(sc, "SELECT count(*) FROM mtcars")
library(dplyr) count(cars)
select(cars, hp, mpg) %>%   sample_n(100) %>%   collect() %>%   plot()
model <- ml_linear_regression(cars, mpg ~ hp) model
model %>%   ml_predict(copy_to(sc, data.frame(hp = 250 + 10 * 1:10))) %>%   transmute(hp = hp, mpg = prediction) %>%   full_join(select(cars, hp, mpg)) %>%   collect() %>%   plot()
spark_write_csv(cars, "cars.csv")
wd
install.packages("sparklyr.nested")
sparklyr.nested::sdf_nest(cars, hp) %>%   group_by(cyl) %>%   summarise(data = collect_list(data))
cars %>% spark_apply(~round(.x))
dir.create("input") write.csv(mtcars, "input/cars_1.csv", row.names = F)
stream <- stream_read_csv(sc, "input/") %>%     select(mpg, cyl, disp) %>%     stream_write_csv("output/")
dir("output", pattern = ".csv")
# Write more data into the stream source write.csv(mtcars, "input/cars_2.csv", row.names = F)
dir("output", pattern = ".csv")
stream_stop(stream) # stop stream
spark_log(sc) # extract spark log
spark_log(sc, filter = "sparklyr")
spark_disconnect(sc)
spark_disconnect_all()
sc <- spark_connect(master = "local", version = "2.3")
library(sparklyr)
sc <- spark_connect(master = "local", version = "2.3")
options(spark.install.dir = "C:/datasciense/spark/")
sc <- spark_connect(master = "local", version = "2.3")
spark_disconnect_all()
library(sparklyr) library(dplyr)
sc <- spark_connect(master = "local", version = "2.3")
options(spark.install.dir = "C:/datasciense/spark/")
sc <- spark_connect(master = "local", version = "2.3")
cars <- copy_to(sc, mtcars)
summarize_all(cars, mean)
summarize_all(cars, mean) %>%   show_query()
cars %>%   mutate(transmission = ifelse(am == 0, "automatic", "manual")) %>%   group_by(transmission) %>%   summarise_all(mean) %>%     show_query()
summarise(cars, mpg_percentile = percentile(mpg, 0.25))
summarise(cars, mpg_percentile = percentile(mpg, array(0.25, 0.5, 0.75))) # Hive array function
summarise(cars, mpg_percentile = percentile(mpg, array(0.25, 0.5, 0.75))) %>%   mutate(mpg_percentile = explode(mpg_percentile))
ml_corr(cars)
library(corrr)
correlate(cars, use = "pairwise.complete.obs", method = "pearson")
correlate(cars, use = "complete.obs", method = "pearson")
correlate(cars, use = "complete.obs", method = "pearson") %>%   shave() %>%   rplot()
library(ggplot2)
ggplot(aes(as.factor(cyl), mpg), data = mtcars) + geom_col()
car_group <- mtcars %>%   group_by(cyl) %>%   summarise(mpg = sum(mpg, na.rm = TRUE)) %>%   collect() %>%   print()
car_group <- mtcars %>%   group_by(cyl) %>%   summarise(mpg = sum(mpg, na.rm = TRUE)) %>%   collect() %>%   print() %>%     show_query()
car_group <- cars %>%   group_by(cyl) %>%   summarise(mpg = sum(mpg, na.rm = TRUE)) %>%   collect() %>%   print() %>%     show_query()
car_group <- cars %>%   group_by(cyl) %>%   summarise(mpg = sum(mpg, na.rm = TRUE)) %>%   collect() %>%   print()
car_group <- cars %>%   group_by(cyl) %>%   summarise(mpg = sum(mpg, na.rm = TRUE)) %>%   collect() %>%   show_query()
car_group <- cars %>%   group_by(cyl) %>%   summarise(mpg = sum(mpg, na.rm = TRUE)) %>%   collect() %>%   print()
ggplot(aes(as.factor(cyl), mpg), data = car_group) +   geom_col(fill = "#999999") + coord_flip()
library(dbplot)
install.packages("dbplot")
library(dbplot)
cars %>% dbplot_histogram(mpg, binwidth = 3) + labs(title = "MPG Distribution",      subtitle = "Histogram over miles per gallon")
ggplot(aes(mpg, wt), data = mtcars) +   geom_point()
dbplot_raster(cars, mpg, wt, resolution = 16)
cars %>%   ml_linear_regression(mpg ~ .) %>%   summary()
cars %>%   ml_generalized_linear_regression(mpg ~ hp + cyl) %>%   summary()
cached_cars <- cars %>%   mutate(cyl = paste0("cyl_", cyl)) %>%   compute("cached_cars")
cars %>%   ml_linear_regression(mpg ~ .) %>%   summary()
cached_cars %>%   ml_linear_regression(mpg ~ .) %>%   summary()
spark_disconnect(sc)
rmarkdown::render("report.Rmd")
rmarkdown::render("report.Rmd")
install.packages("pandoc")
install.packages("rmarkdown")
rmarkdown::render("report.Rmd")
install.packages("installr") library(installr) install.pandoc()
rmarkdown::render("report.Rmd")
library(rmarkdown)
render("report.Rmd")
library(knitr)
render("report.Rmd")
?rmarkdown::pandoc_available
pandoc_version()
Sys.getenv("RSTUDIO_PANDOC")
Sys.getenv("PANDOC")
pandoc_version()
rmarkdown::pandoc()
install.pandoc() pandoc_version()
library(rmarkdown) library(knitr) render("report.Rmd")
pandoc_version()
install.pandoc()
pandoc --version
